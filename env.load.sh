# File should only be sourced (thanks https://stackoverflow.com/a/28776166)
sourced=0
if [ -n "$ZSH_VERSION" ]; then
  case $ZSH_EVAL_CONTEXT in *:file) sourced=1;; esac
elif [ -n "$KSH_VERSION" ]; then
  [ "$(cd -- "$(dirname -- "$0")" && pwd -P)/$(basename -- "$0")" != "$(cd -- "$(dirname -- "${.sh.file}")" && pwd -P)/$(basename -- "${.sh.file}")" ] && sourced=1
elif [ -n "$BASH_VERSION" ]; then
  (return 0 2>/dev/null) && sourced=1
else # All other shells: examine $0 for known shell binary filenames.
     # Detects `sh` and `dash`; add additional shell filenames as needed.
  case ${0##*/} in sh|-sh|dash|-dash) sourced=1;; esac
fi

if [[ $sourced = 0 ]]; then
  echo "File should not be run directly, it should only be sourced.";
  exit 1;
fi

# ~~~~~~~ Constants
CHARSET_NUM="0123456789"
CHARSET_ALPHAL="abcdefghijklmnopqrstuvwxyz"
CHARSET_ALPHAU="ABCDEFGHIJKLMNOPQRSTUVWXYZ"
CHARSET_ALPHALU="$CHARSET_ALPHAL$CHARSET_ALPHAU"
CHARSET_ALPHALU_NUM="$CHARSET_ALPHALU$CHARSET_NUM"

# ~~~~~~~ Functions
# Ask for OMDB API Key and save it
save_api_key() {
  echo "Please enter your OMDB API Key (http://www.omdbapi.com/apikey.aspx): "
  read -r api_key_omdb
  while [ -z ${api_key_omdb} ] || [ -v "$api_key_omdb" ]; do
    echo "Key cannot be empty! Try again..."
    read -r api_key_omdb
  done
  export VITE_APP_API_KEY_OMDB="$api_key_omdb"
  echo "Saved the OMDB API Key in the .env file."
  echo -e "\n# OMDB API Key\nVITE_APP_API_KEY_OMDB=$api_key_omdb" >> .env
}

# Generate a "random" string
# 1: The Charset
# 2: The Length of the String
generate_string() {
  charset=$1
  string_length=$2
  for ((i=1;i<=string_length;i++)); do
      echo -n "${charset:RANDOM%${#charset}:1}"
  done
}

# Save generated value to .env file
# 1: The Name of the Variable
# 2: The Content of the Variable
save_generated_value() {
  variable_name=$1
  variable_content=$2
  echo "Generated value for $variable_name and saved in the .env file."
  echo -e "\n# Autogenerated value for $variable_name by env.load.sh\n$variable_name=$variable_content" >> .env
}

# Reset all variables
unset APP_PORT
unset POSTGRES_USER
unset POSTGRES_PASSWORD
unset APP_DB_USER
unset APP_DB_PASS
unset APP_DB_NAME
unset VITE_APP_API_KEY_OMDB
unset LOGGING_LEVEL

# Verify .env file exists
if [ ! -f .env ]; then
  echo "No .env file, so one will be created."
else
  # Export env vars
  export $(grep -v '^#' .env | xargs)
fi

# Ask for and save information for env vars if missing
if [ -z ${VITE_APP_API_KEY_OMDB} ] || [ -v "$VITE_APP_API_KEY_OMDB" ]; then
  save_api_key
fi

# Generate and save standard env vars if missing
if [ -z ${POSTGRES_USER} ] || [ -v "$POSTGRES_USER" ]; then
  get_POSTGRES_USER=postgres_$(generate_string "$CHARSET_NUM" 4)
  save_generated_value POSTGRES_USER "$get_POSTGRES_USER"
  export POSTGRES_USER=$get_POSTGRES_USER
fi

if [ -z ${POSTGRES_PASSWORD} ] || [ -v "$POSTGRES_PASSWORD" ]; then
  get_POSTGRES_PASSWORD=$(generate_string "$CHARSET_ALPHALU_NUM" 32)
  save_generated_value POSTGRES_PASSWORD "$get_POSTGRES_PASSWORD"
  export POSTGRES_PASSWORD=$get_POSTGRES_PASSWORD
fi

if [ -z ${APP_DB_USER} ] || [ -v "$APP_DB_USER" ]; then
  get_APP_DB_USER=movie_fan_$(generate_string "$CHARSET_NUM" 4)
  save_generated_value APP_DB_USER "$get_APP_DB_USER"
  export APP_DB_USER=$get_APP_DB_USER
fi

if [ -z ${APP_DB_PASS} ] || [ -v "$APP_DB_PASS" ]; then
  get_APP_DB_PASS=$(generate_string "$CHARSET_ALPHALU_NUM" 32)
  save_generated_value APP_DB_PASS "$get_APP_DB_PASS"
  export APP_DB_PASS=$get_APP_DB_PASS
fi

if [ -z ${APP_DB_NAME} ] || [ -v "$APP_DB_NAME" ]; then
  get_APP_DB_NAME=movie_db_$(generate_string "$CHARSET_ALPHAL" 2)
  save_generated_value APP_DB_NAME "$get_APP_DB_NAME"
  export APP_DB_NAME=$get_APP_DB_NAME
fi

# Standard env vars that may have constant values
if [ -z ${APP_PORT} ] || [ -v "$APP_PORT" ]; then
  export APP_PORT=3000
fi

if [ -z ${LOGGING_LEVEL} ] || [ -v "$LOGGING_LEVEL" ]; then
  export LOGGING_LEVEL=OFF
fi

# Verify env vars
if [ -z ${VITE_APP_API_KEY_OMDB} ] || [ -v "$VITE_APP_API_KEY_OMDB" ]; then
  echo "Please set \$VITE_APP_API_KEY_OMDB in the .env file";
  exit 1;
fi

if [ -n "$APP_PORT" ] && ! [[ $APP_PORT =~ ^[0-9]+$ ]]; then
  echo "If using \$APP_PORT, please set is to a NUMERIC value only, not '$APP_PORT'";
  exit 1;
fi

if [ -n "$LOGGING_LEVEL" ] && ! [[ $LOGGING_LEVEL =~ ^(TRACE|DEBUG|INFO|WARN|ERROR|FATAL|OFF)$ ]]; then
  echo "If using \$LOGGING_LEVEL for debugging, please set is to either of TRACE, DEBUG, INFO, WARN, ERROR, FATAL or OFF only, not '$LOGGING_LEVEL'";
  exit 1;
fi